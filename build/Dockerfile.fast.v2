# Fast Application Build for Insights v2 - Uses minimcp-base:latest
# This builds quickly by leveraging the base image and only adding v2 code
# Includes the new unified insights v2 system

FROM minimemcp-base:latest

# Set up non-root user with same IDs as base
ARG USER_ID=1001
ARG GROUP_ID=1001

# Use root temporarily for setup
USER root

# Install only application dependencies (fast layer)
WORKDIR /app/src
COPY src/package*.json ./
RUN npm audit fix --force || true && \
    npm ci --only=production && \
    npm cache clean --force

# Copy pre-built UI assets and install server dependencies
WORKDIR /app/ui
COPY ui/package*.json ./
RUN npm ci --only=production
COPY ui/dist/ ./dist/
COPY ui/server.js ./

# Switch back to non-root user
USER ${USER_ID}:${GROUP_ID}

# Set working directory
WORKDIR /app

# Copy application source code (changes frequently)
COPY --chown=${USER_ID}:${GROUP_ID} src/ ./src/

# Copy database initialization files
RUN mkdir -p ./database
# Copy the SQL files - they will be executed in order by the entrypoint
COPY --chown=${USER_ID}:${GROUP_ID} build/sql-bootstrap/MINIME_TABLES_CREATE_01.sql ./database/
COPY --chown=${USER_ID}:${GROUP_ID} build/sql-bootstrap/MINIME_DATA_INSERT_02.sql ./database/
COPY --chown=${USER_ID}:${GROUP_ID} build/sql-bootstrap/MINIME_INSIGHT_TEMPLATES_INSERT_03.sql ./database/
COPY --chown=${USER_ID}:${GROUP_ID} build/sql-bootstrap/MINIME_DATA_INSERTS_COMPLETE_MARKER_04.sql ./database/
COPY --chown=${USER_ID}:${GROUP_ID} build/sql-bootstrap/MINIME_MIGRATIONS_05.sql ./database/
COPY --chown=${USER_ID}:${GROUP_ID} build/sql-bootstrap/MINIME_VALIDATION_1000.sql ./database/

# Copy any hotfix SQL files (if they exist)
# Note: This will fail if no hotfix files exist, which is okay
COPY --chown=${USER_ID}:${GROUP_ID} build/sql-bootstrap/MINIME_HOTFIX_*.sql ./database/

# Copy application entrypoints and startup scripts
COPY --chown=${USER_ID}:${GROUP_ID} build/docker-entrypoint-with-local-models.sh /docker-entrypoint.sh
USER root
RUN chmod +x /docker-entrypoint.sh
USER ${USER_ID}:${GROUP_ID}

# Application-specific environment variables for v2
ENV MCP_PORT=8000 \
    UI_PORT=9000 \
    LOAD_SAMPLE_DATA=true \
    USE_LOCAL_MODELS=false \
    MCP_DEBUG=false \
    # V2 specific configs - enables v2 in service-initializer.js
    INSIGHTS_VERSION=v2 \
    ENABLE_UNIFIED_INSIGHTS=true \
    # Processing settings
    REAL_TIME_PROCESSING=true \
    BATCH_SIZE=10 \
    MAX_CONCURRENT=5 \
    # Feature flags
    ENABLE_PATTERN_MATCHING=true \
    ENABLE_RELATIONSHIP_FINDING=true \
    ENABLE_TECHNOLOGY_EXTRACTION=true \
    # Queue settings
    ENABLE_ASYNC_QUEUE=true \
    QUEUE_WORKERS=2

# Security labels
LABEL build.type="fast-v2" \
      build.base="minimcp-base:latest" \
      build.layer="application" \
      build.version="v2" \
      insights.version="unified-v2" \
      insights.features="pattern-detection,llm-category,clustering,synthesis" \
      maintainer="MiniMe Team"

# Expose application ports (same as base - no new ports needed)
EXPOSE 8000 9000 5432 11434 9229

# Security: Enhanced health check with proper timeout (checks MCP health endpoint)
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8000/health || exit 1

# Run with application entrypoint that handles PostgreSQL, Ollama, and MCP server
ENTRYPOINT ["/docker-entrypoint.sh"]