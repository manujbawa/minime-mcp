# Base Image with Heavy Dependencies  
# This contains all the expensive downloads: Node.js, pgvector, PostgreSQL
# Ollama models are now served from host machine
# Only rebuild this when dependencies change, not on every code change

FROM debian:12-slim

# Set up non-root user with numeric ID
ARG USER_ID=1000
ARG GROUP_ID=1000

# Build arguments (Ollama models now served from host)
ARG USE_LOCAL_MODELS=false

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Security: Update base packages first
RUN apt-get update && apt-get dist-upgrade -y && rm -rf /var/lib/apt/lists/*

# Install system dependencies with security updates
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    gnupg \
    git \
    build-essential \
    postgresql-15 \
    postgresql-client-15 \
    postgresql-contrib-15 \
    postgresql-server-dev-15 \
    clang \
    wget \
    jq \
    && apt-get install -y --only-upgrade \
    libxml2 \
    libexpat1 \
    libicu72 \
    zlib1g \
    libssl3 \
    libgssapi-krb5-2 \
    libc6 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Security: Remove default SSL certificates
RUN rm -f /etc/ssl/private/ssl-cert-snakeoil.key \
          /etc/ssl/certs/ssl-cert-snakeoil.pem

# Install Node.js 20.x LTS directly from NodeSource
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g npm@latest && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install pgvector directly from GitHub
RUN git clone --branch v0.5.1 https://github.com/pgvector/pgvector.git /tmp/pgvector && \
    cd /tmp/pgvector && \
    PG_CONFIG=/usr/lib/postgresql/15/bin/pg_config make && \
    PG_CONFIG=/usr/lib/postgresql/15/bin/pg_config make install && \
    rm -rf /tmp/pgvector

# Create non-root user and group with numeric IDs
RUN groupadd -g ${GROUP_ID} appuser && \
    useradd -u ${USER_ID} -g appuser -s /bin/bash -m appuser

# Create required directories with proper ownership (no Ollama data dir needed)
RUN mkdir -p /data/postgres /app /var/log/minime && \
    chown -R ${USER_ID}:${GROUP_ID} /data /app /var/log/minime

# PostgreSQL directories
RUN mkdir -p /run/postgresql && \
    chown -R ${USER_ID}:${GROUP_ID} /run/postgresql

# Switch to non-root user (no Ollama setup needed)
USER ${USER_ID}:${GROUP_ID}

# Security: Set production environment variables (no Ollama env vars needed)
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=1024" \
    NPM_CONFIG_CACHE=/tmp/.npm \
    PGDATA=/data/postgres \
    POSTGRES_USER=minime \
    POSTGRES_DB=minime_memories \
    PATH="/usr/lib/postgresql/15/bin:$PATH"

# Set working directory
WORKDIR /app

# Security labels
LABEL security.scan="enabled" \
      security.updates="2025-06-19" \
      maintainer="MiniMe Team" \
      vendor.optimization="true" \
      vendor.type="base_image" \
      vendor.models="mxbai-embed-large,qwen3" \
      vendor.internet_deps="minimized"

# Volume for persistent data
VOLUME ["/data"]

# Base image doesn't run anything by default - just provides infrastructure
CMD ["/bin/bash"]