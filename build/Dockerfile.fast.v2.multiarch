# Fast Application Build for Insights v2 - Multi-arch version
# This builds quickly by leveraging the base image and only adding v2 code
# Includes the new unified insights v2 system

# Copy the base stage from Dockerfile.base to ensure we use the cached build
FROM debian:12-slim AS base

# Set up non-root user with numeric ID
ARG USER_ID=1001
ARG GROUP_ID=1001
ARG USE_LOCAL_MODELS=false

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Security: Update base packages first
RUN apt-get update && apt-get dist-upgrade -y && rm -rf /var/lib/apt/lists/*

# Install system dependencies with security updates
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    gnupg \
    git \
    build-essential \
    postgresql-15 \
    postgresql-client-15 \
    postgresql-contrib-15 \
    postgresql-server-dev-15 \
    clang \
    wget \
    jq \
    && apt-get install -y --only-upgrade \
    libxml2 \
    libexpat1 \
    libicu72 \
    zlib1g \
    libssl3 \
    libgssapi-krb5-2 \
    libc6 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Security: Remove default SSL certificates
RUN rm -f /etc/ssl/private/ssl-cert-snakeoil.key \
          /etc/ssl/certs/ssl-cert-snakeoil.pem

# Install Node.js 20.x LTS directly from NodeSource
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g npm@latest && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install pgvector directly from GitHub
RUN git clone --branch v0.5.1 https://github.com/pgvector/pgvector.git /tmp/pgvector && \
    cd /tmp/pgvector && \
    PG_CONFIG=/usr/lib/postgresql/15/bin/pg_config make && \
    PG_CONFIG=/usr/lib/postgresql/15/bin/pg_config make install && \
    rm -rf /tmp/pgvector

# Create non-root user and group with numeric IDs
RUN groupadd -g ${GROUP_ID} appuser && \
    useradd -u ${USER_ID} -g appuser -s /bin/bash -m appuser

# Create required directories with proper ownership (no Ollama data dir needed)
RUN mkdir -p /data/postgres /app /var/log/minime && \
    chown -R ${USER_ID}:${GROUP_ID} /data /app /var/log/minime

# PostgreSQL directories
RUN mkdir -p /run/postgresql && \
    chown -R ${USER_ID}:${GROUP_ID} /run/postgresql

# Set working directory
WORKDIR /app

# Now continue with the app build
FROM base

ARG USER_ID=1001
ARG GROUP_ID=1001

# Use root temporarily for setup
USER root

# Install only application dependencies (fast layer)
WORKDIR /app/src
COPY src/package*.json ./
RUN npm audit fix --force || true && \
    npm ci --only=production && \
    npm cache clean --force

# UI dependencies - optimized for v2
WORKDIR /app/ui
COPY ui/package*.json ./
RUN npm ci --only=production && \
    npm cache clean --force

# Create project structure for v2
WORKDIR /app
RUN mkdir -p \
    /app/src/services/insights-v2 \
    /app/src/services/patterns \
    /app/database/migrations \
    /app/database/backup && \
    chown -R ${USER_ID}:${GROUP_ID} /app

# Copy database schema and startup scripts
COPY --chown=${USER_ID}:${GROUP_ID} build/sql-bootstrap/ /app/database/

# Copy src folder with v2 features
COPY --chown=${USER_ID}:${GROUP_ID} src/ /app/src/

# Copy UI assets (built externally)
COPY --chown=${USER_ID}:${GROUP_ID} ui/dist/ /app/ui/dist/
COPY --chown=${USER_ID}:${GROUP_ID} ui/server.js /app/ui/
COPY --chown=${USER_ID}:${GROUP_ID} ui/package*.json /app/ui/

# Copy scripts and configuration
COPY --chown=${USER_ID}:${GROUP_ID} build/docker-entrypoint-with-local-models.sh /app/
RUN chmod +x /app/docker-entrypoint-with-local-models.sh

# Switch to non-root user
USER ${USER_ID}:${GROUP_ID}

# Security hardening
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=1024 --no-deprecation" \
    NPM_CONFIG_CACHE=/tmp/.npm \
    PGDATA=/data/postgres \
    POSTGRES_USER=minime \
    POSTGRES_DB=minime_memories \
    PATH="/usr/lib/postgresql/15/bin:$PATH" \
    USE_LOCAL_MODELS=true \
    INSIGHTS_VERSION=v2 \
    ENABLE_UNIFIED_INSIGHTS=true

# Build metadata with v2 info
LABEL security.scan="enabled" \
      security.updates="2025-06-19" \
      maintainer="MiniMe Team" \
      version="0.1.7-v2" \
      description="MiniMe MCP Server with Unified Insights v2" \
      features="unified-patterns,llm-categorization,smart-enrichment" \
      vendor.optimization="true" \
      vendor.type="app_image_v2"

# Volume for persistent data
VOLUME ["/data"]

# Expose all necessary ports
EXPOSE 5432 8000 9000

# Health check - v2 enhanced
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Entry point with local models support
ENTRYPOINT ["/app/docker-entrypoint-with-local-models.sh"]

# Start MCP server with v2 features
CMD ["node", "/app/src/index.js"]